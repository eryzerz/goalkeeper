!function(e){function t(t){for(var r,c,i=t[0],s=t[1],l=t[2],d=0,p=[];d<i.length;d++)c=i[d],Object.prototype.hasOwnProperty.call(a,c)&&a[c]&&p.push(a[c][0]),a[c]=0;for(r in s)Object.prototype.hasOwnProperty.call(s,r)&&(e[r]=s[r]);for(u&&u(t);p.length;)p.shift()();return o.push.apply(o,l||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],r=!0,i=1;i<n.length;i++){var s=n[i];0!==a[s]&&(r=!1)}r&&(o.splice(t--,1),e=c(c.s=n[0]))}return e}var r={},a={4:0},o=[];function c(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,c),n.l=!0,n.exports}c.m=e,c.c=r,c.d=function(e,t,n){c.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},c.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},c.t=function(e,t){if(1&t&&(e=c(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(c.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)c.d(n,r,function(t){return e[t]}.bind(null,r));return n},c.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return c.d(t,"a",t),t},c.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},c.p="";var i=window.webpackJsonp=window.webpackJsonp||[],s=i.push.bind(i);i.push=t,i=i.slice();for(var l=0;l<i.length;l++)t(i[l]);var u=s;o.push([49,1,0]),n()}({49:function(e,t,n){"use strict";n.r(t);n(7),n(8),n(9),n(5);var r=n(0),a=n.n(r),o=n(1);function c(e,t,n,r,a,o,c){try{var i=e[o](c),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}var i=function(){var e,t=(e=regeneratorRuntime.mark((function e(t){var n,r,c;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!("caches"in window)){e.next=23;break}return e.next=3,caches.match("https://api.football-data.org/v2/teams/".concat(t));case 3:if(!(n=e.sent)){e.next=11;break}return e.next=7,n.json();case 7:return r=e.sent,e.abrupt("return",r);case 11:return e.prev=11,e.next=14,a.a.get("https://api.football-data.org/v2/teams/".concat(t),o.a);case 14:return c=e.sent,e.abrupt("return",c.data);case 18:return e.prev=18,e.t0=e.catch(11),e.abrupt("return",null);case 21:e.next=24;break;case 23:console.log("Caches is not supported in this browser");case 24:case"end":return e.stop()}}),e,null,[[11,18]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){c(o,r,a,i,s,"next",e)}function s(e){c(o,r,a,i,s,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}(),s=n(4);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var c,i=e[Symbol.iterator]();!(r=(c=i.next()).done)&&(n.push(c.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==i.return||i.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return d(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function p(e,t,n,r,a,o,c){try{var i=e[o](c),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function f(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){p(o,r,a,c,i,"next",e)}function i(e){p(o,r,a,c,i,"throw",e)}c(void 0)}))}}function v(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function y(e){var t="function"==typeof Map?new Map:void 0;return(y=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return b(e,arguments,S(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),w(r,e)})(e)}function b(e,t,n){return(b=g()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var a=new(Function.bind.apply(e,r));return n&&w(a,n.prototype),a}).apply(null,arguments)}function g(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function S(e){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var x={content:""},k=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(p,e);var t,n,r,a,o,c,l,d=(t=p,n=g(),function(){var e,r=S(t);if(n){var a=S(this).constructor;e=Reflect.construct(r,arguments,a)}else e=r.apply(this,arguments);return m(this,e)});function p(){return v(this,p),d.apply(this,arguments)}return r=p,(a=[{key:"connectedCallback",value:(l=f(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this.loading(),e.next=3,this.loadTeamData();case 3:this._data=e.sent,this._data?this.render():this.innerHTML='\n                <div class="container" style="height: 100vh; display: flex; justify-content: center; align-items: center;">\n                    <h5 style="text-align: center; font-family: var(--font-tertiary);">Oops.. cannot get team data. Please try again in a minute</h5>\n                </div>\n                ';case 5:case"end":return e.stop()}}),e,this)}))),function(){return l.apply(this,arguments)})},{key:"loading",value:function(){this.innerHTML='\n        <div class="container" style="height: 100vh; display: flex; justify-content: center; align-items: center;">\n            <div class="progress"><div class="indeterminate"></div></div>\n        </div>\n        '}},{key:"loadPlayer",value:function(e){var t=new Date(e.dateOfBirth).toLocaleDateString();return'\n        <li class="player">\n            <div class="collapsible-header player-header">'.concat(e.name,'</div>\n            <div class="collapsible-body player-body">\n                <div class="desc">\n                    <h6>Position</h6>\n                    <p>').concat(e.position,'</p>\n                </div>\n                <div class="desc">\n                    <h6>Nationality</h6>\n                    <p>').concat(e.nationality,'</p>\n                </div>\n                <div class="desc">\n                    <h6>Date of Birth</h6>\n                    <p>').concat(t,"</p>\n                </div>\n            </div>\n        </li>\n        ")}},{key:"loadCoach",value:function(e){var t=new Date(e.dateOfBirth).toLocaleDateString();return'\n        <div class="coach">\n            <div class="coach-name">\n                <p>'.concat(e.name,'</p>\n            </div>\n            <div class="desc">\n                <h6>Nationality</h6>\n                <p>').concat(e.nationality,'</p>\n            </div>\n            <div class="desc">\n                <h6>Date of birth</h6>\n                <p>').concat(t,"</p>\n            </div>\n        </div>\n        ")}},{key:"loadTeamData",value:(c=f(regeneratorRuntime.mark((function e(){var t,n,r,a,o,c,s,l,u,d,p,f,v,h,m,y;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=new URLSearchParams(window.location.search),n=t.get("id"),e.prev=2,e.next=5,i(n);case 5:if(!(r=e.sent)){e.next=12;break}return a=r.name,o=r.shortName,c=r.founded,s=r.venue,l=r.clubColors,u=r.address,d=r.website,p=r.email,f=r.crestUrl,v=r.squad,h={name:a,shortName:o,founded:c,venue:s,clubColors:l,address:u,website:d,email:p,crestUrl:f},m=v.filter((function(e){return"PLAYER"===e.role})),y=v.filter((function(e){return"COACH"===e.role}))?v.filter((function(e){return"COACH"===e.role}))[0]:null,e.abrupt("return",[h,m,y]);case 12:return e.abrupt("return",r);case 15:return e.prev=15,e.t0=e.catch(2),e.abrupt("return",e.t0);case 18:case"end":return e.stop()}}),e,null,[[2,15]])}))),function(){return c.apply(this,arguments)})},{key:"render",value:function(){var e=this,t=u(this._data,3),n=t[0],r=t[1],a=t[2],o=JSON.parse(localStorage.getItem("is-from-keeper"));this.innerHTML='\n        <div class="container wrapper">\n            <h5>'.concat(n.name,'</h5>\n            <div class="team-container">\n                <div class="desc-container">\n                    <div class="desc">\n                        <h6>Short name</h6>\n                        <p>').concat(n.shortName,'</p>\n                    </div>\n                    <div class="desc">\n                        <h6>Founded</h6>\n                        <p>').concat(n.founded,'</p>\n                    </div>\n                    <div class="desc">\n                        <h6>Venue</h6>\n                        <p>').concat(n.venue,'</p>\n                    </div>\n                    <div class="desc">\n                        <h6>Club colors</h6>\n                        <p>').concat(n.clubColors,'</p>\n                    </div>\n                    <div class="desc">\n                        <h6>Address</h6>\n                        <p>').concat(n.address,'</p>\n                    </div>\n                    <div class="desc">\n                        <h6>Website</h6>\n                        <p>').concat(n.website,'</p>\n                    </div>\n                    <div class="desc">\n                        <h6>E-mail</h6>\n                        <p>').concat(n.email,'</p>\n                    </div>\n                </div>\n                <img class="team-crest" src="').concat(n.crestUrl,'" alt="">\n            </div>\n        \n            <div class="squad-container">\n                <h5>Players</h5>\n                <ul class="collapsible popout">\n                ').concat(r.reduce((function(t,n){return t+e.loadPlayer(n)}),""),'\n                </ul>\n            </div>\n        \n            <div class="coach-container">\n                <h5>Coach</h5>\n                ').concat(a?this.loadCoach(a):'<h5 style="text-align: center; font-family: var(--font-tertiary);">Currently, we have no data about the coach</h5>',"\n            </div>\n\n            ").concat(o?'<div class="fixed-action-btn">\n                <a class="btn-floating btn-large grey darken-4" style="box-shadow: -2px 2px 9px var(--text-primary);" id="delete-save">\n                <i class="fad fa-trash"></i>\n                </a>\n            </div>\n            <div class="tap-target" data-target="delete-save">\n                <div class="tap-target-content">\n                <h5>Delete</h5>\n                <p>Remove your favourite team from Keeper</p>\n                </div>\n            </div>\n                ':'<div class="fixed-action-btn">\n                <a class="btn-floating btn-large grey darken-4" style="box-shadow: -2px 2px 9px var(--text-primary);" id="save">\n                <i class="fad fa-save"></i>\n                </a>\n            </div>\n            <div class="tap-target" data-target="save">\n                <div class="tap-target-content">\n                <h5>Your Keeper</h5>\n                <p>Save your favourite team with Keeper by clicking the button again after you dismissed this info</p>\n                </div>\n            </div>\n            ','\n            <div id="delete-modal" class="modal">\n                <div class="modal-content">\n                    <h4>Remove Saved Team</h4>\n                    <p>Are you sure you want to remove this team from Keeper?</p>\n                </div>\n                <div class="modal-footer">\n                    <button id="agree-btn" class="modal-close waves-effect waves-green btn-flat">Yep</button>\n                    <button id="cancel-btn" class="modal-close waves-effect waves-green btn-flat">Nope</button>\n                </div>\n            </div>\n        </div>\n        ');var c=document.querySelector(".tap-target");M.TapTarget.init(c);var l=M.TapTarget.getInstance(c);if(localStorage.getItem("isTargetOpen")||(l.open(),localStorage.setItem("isTargetOpen",!0)),o){var d=document.querySelector("#delete-save"),p=document.querySelector(".modal"),v=M.Modal.init(p),h=document.querySelector("#agree-btn");document.querySelector("#cancel-btn"),d.addEventListener("click",f(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:v.open(),h.addEventListener("click",f(regeneratorRuntime.mark((function e(){var t,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=new URLSearchParams(window.location.search),n=t.get("id"),e.next=4,Object(s.b)(n);case 4:M.toast({html:"Team successfully deleted!",classes:"save-toast"}),l.close(),v.destroy(),history.replaceState(x,null,"index.html#keeper"),window.location.reload();case 9:case"end":return e.stop()}}),e)}))));case 2:case"end":return e.stop()}}),e)}))))}else document.querySelector("#save").addEventListener("click",f(regeneratorRuntime.mark((function e(){var t,n,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=new URLSearchParams(window.location.search),n=t.get("id"),e.next=4,i(n);case 4:return r=e.sent,e.next=7,Object(s.f)(r);case 7:e.sent?M.toast({html:"You already save this poor team!",classes:"save-toast"}):M.toast({html:"".concat(r.name," successfully saved! Check your Keeper"),classes:"save-toast"}),l.close();case 10:case"end":return e.stop()}}),e)}))));var m=document.querySelectorAll(".collapsible");M.Collapsible.init(m);var y=document.querySelectorAll(".player"),b=document.querySelectorAll(".player-body");y[0].classList.toggle("active"),b[0].style.display="block"}}])&&h(r.prototype,a),o&&h(r,o),p}(y(HTMLElement));function O(e,t,n,r,a,o,c){try{var i=e[o](c),s=i.value}catch(e){return void n(e)}i.done?t(s):Promise.resolve(s).then(r,a)}function R(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){O(o,r,a,c,i,"next",e)}function i(e){O(o,r,a,c,i,"throw",e)}c(void 0)}))}}customElements.define("team-desc-elem",k);var P={content:""},j=function(){var e=R(regeneratorRuntime.mark((function e(){var t,n,r,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=function(){var e=R(regeneratorRuntime.mark((function e(t){var n,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return"/dist/src/pages/team.html",e.prev=1,e.next=4,a.a.get("/dist/src/pages/team.html");case 4:200===(n=e.sent).status?(P.content=n.data,r=document.querySelector("#main-content"),history.pushState(P,null,"team-detail.html?id=".concat(t)),window.onpopstate=function(e){e.state&&(P=e.state,r.innerHTML=P.content)},r.innerHTML=P.content):console.error("Something went wrong on load content!"),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(1),console.error("Something went wrong on load content! ".concat(e.t0));case 11:case"end":return e.stop()}}),e,null,[[1,8]])})));return function(t){return e.apply(this,arguments)}}(),n=new URLSearchParams(window.location.search),""!==(r=n.get("id"))&&null!==r||(r="1"),e.next=6,t(r);case 6:(o=document.querySelector(".sidenav-back"))&&o.addEventListener("click",(function(){if(window.location.pathname.match("team-detail.html")){var e=localStorage.getItem("code");JSON.parse(localStorage.getItem("is-from-keeper"))?history.replaceState(P,null,"index.html#keeper"):history.replaceState(P,null,"competition-detail.html?code=".concat(e)),window.location.reload()}}));case 8:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();document.addEventListener("DOMContentLoaded",(function(){"serviceWorker"in navigator?navigator.serviceWorker.register("/service-worker.js").then((function(){console.log("Service Worker successfully registered"),j()})).catch((function(){console.log("Failed to register Service Worker")})):console.log("Service Worker isn't supported in this browser.")}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,